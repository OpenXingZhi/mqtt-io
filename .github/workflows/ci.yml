name: MQTT IO CI
on:
  - push
  - pull_request
  - release
jobs:
  test:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Lint with pylint
        run: poetry run pylint -d fixme mqtt_io
      - name: Lint with mypy
        run: poetry run mypy --show-error-codes --strict --no-warn-unused-ignores mqtt_io
      - name: Test with behave
        run: poetry run behave -t ~skip mqtt_io/tests/features

  publish:
    name: Publish to PyPI
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install poetry
        run: pip install poetry
      - name: Build packages
        run: poetry build
      - name: Publish packages
        uses: pypa/gh-action-pypi-publish@master
        # if: startsWith(github.ref, 'refs/tags')
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  build_docker_image:
    name: Build Docker Image
    if: (github.event_name == 'release' && github.event.action == 'created') || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/mqtt-io
            ghcr.io/${{ github.repository }}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  generate_docs:
    name: Generate Documentation
    if: github.event_name == 'release' && github.event.action == 'created'
    concurrency: generate_docs
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: branch-name
        uses: tj-actions/branch-names@v7.0.7
      - name: Ensure we can checkout gh-pages
        run: |
          git checkout gh-pages
          git checkout ${{ steps.branch-name.outputs.current_branch }}
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies and generate docs
        run: |
          pip install poetry
          poetry install
          poetry run python docs_src/generate_docs.py
